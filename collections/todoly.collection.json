{
	"info": {
		"_postman_id": "a3cdbce9-65fd-4d17-8193-cf678545d6a8",
		"name": "todo.ly test",
		"description": "Welcome to the Todo.ly API wiki\nTodo.ly exposes its data via an Application Programming Interface (API). This document is the official reference for that functionality. This API is inspired by the Twitter API.\n\nThe API is entirely HTTP-based\nMethods to retrieve data from the this API require a GET request. Methods that submit, change, or destroy data require a POST. A DELETE request is also accepted for methods that destroy data. API Methods that require a particular HTTP method will return an error if you do not make your request with the correct method. HTTP Response Codes are meaningful.\n\nThe API is a RESTful resource\nREST (Representational State Transfer) is a programming concept in which you build your web application to only process basic CRUD (Create Read Update and Delete) operations. The API presently supports the following data formats: XML, JSON.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
									"pm.environment.set(\"pass\", pm.variables.replaceIn(\"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"));",
									"const email =  pm.environment.get(\"name\") + \"_\" + pm.environment.get(\"pass\") + \"@gmail.com\";",
									"pm.environment.set(\"mail\", email );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const userId = pm.response.json().Id;",
									"pm.environment.set(\"userId\", userId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Email\" : \"{{mail}}\",\n    \"FullName\" : \"{{name}}\",\n    \"Password\" : \"{{pass}}\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todolyURL}}/user.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"user.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/user.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"user.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Updated id should be \" + pm.environment.get(\"userId\"), ()=>{",
									"    pm.expect(pm.environment.get(\"userId\")).not.to.be.undefined;",
									"    pm.expect(pm.response.json().Id).to.be.eql(pm.environment.get(\"userId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"FullName\": \"Omar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todolyURL}}/user/0.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"user",
								"0.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects",
			"item": [
				{
					"name": "get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/Projects.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "create project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"projectId\", pm.response.json().Id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\":\"ProjectTestName\",\n    \"Icon\":\"1\"\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todolyURL}}/Projects.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "update project by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response content should be 'My Sport Project'\", function () {",
									"    pm.expect(response.json().Content).to.be.eql(\"My Sport Project\");",
									"});",
									"",
									"pm.test(\"Response icon should be 4\", function () {",
									"    pm.expect(response.json().Icon).to.be.eql(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Content\" : \"My Sport Project\",\n  \"Icon\" : 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todolyURL}}/Projects/{{projectId}}.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects",
								"{{projectId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get project by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Deleted status should be false\", () => {",
									"    pm.expect(pm.response.json().Deleted).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/Projects/{{projectId}}.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects",
								"{{projectId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get items of a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/Projects/{{projectId}}/items.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects",
								"{{projectId}}",
								"items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get done items of a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/Projects/{{projectId}}/doneitems.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects",
								"{{projectId}}",
								"doneitems.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "items",
			"item": [
				{
					"name": "get all items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/items.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "create item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"itemId\", pm.response.json().Id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\" : \"Parent Test item\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todolyURL}}/items.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/items/{{itemId}}.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "update item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ProjectId\": {{projectId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{todolyURL}}/items/{{itemId}}.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get root item by child id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/items/{{itemId}}/RootItem.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items",
								"{{itemId}}",
								"RootItem.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "get done root item by child id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/items/{{itemId}}/DoneRootItem.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items",
								"{{itemId}}",
								"DoneRootItem.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "deletes",
			"item": [
				{
					"name": "delete item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Item id should be \" + pm.environment.get(\"itemId\"), ()=>{",
									"    pm.expect(pm.response.json().Id).to.be.eql(pm.environment.get(\"itemId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/items/{{itemId}}.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete project by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Deleted status should be true\", () => {",
									"    pm.expect(pm.response.json().Deleted).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/Projects/{{projectId}}.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"Projects",
								"{{projectId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Deleted id should be \" + pm.environment.get(\"userId\"), ()=>{",
									"    pm.expect(pm.environment.get(\"userId\")).not.to.be.undefined;",
									"    pm.expect(pm.response.json().Id).to.be.eql(pm.environment.get(\"userId\"));",
									"});",
									"",
									"pm.test(\"Deleted email should be \" + pm.environment.get(\"mail\"), ()=>{",
									"    pm.expect(pm.environment.get(\"mail\")).not.to.be.undefined;",
									"    pm.expect(pm.response.json().Email).to.be.eql(pm.environment.get(\"mail\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{todolyURL}}/user/0.json",
							"host": [
								"{{todolyURL}}"
							],
							"path": [
								"user",
								"0.json"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{pass}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{mail}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}